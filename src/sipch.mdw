-----

This file can be opened with emacs and mar-mode,
Cf. also [Weave doc](http://weavejl.mpastell.com/stable/).

For more details, see sipc-toy.mdw and sipc.mgw

<<>>=
# Define the command () to construct sipc.html file from this file:
import Weave
p() = Weave.weave("sipch.mdw")

import Plots
Plots.gr(); # Plots will use GR as backend
@

-----


## Field in vacuum

The field has a time dependence $e^{-i k_t t}$

For an field at normal incidence on a centered slit, the field is symmetric.
First mode is $H_y(t,x,z) = e^{i k_z z - i k_t t}$ with $k_z = k_t$,
$k_t = 2 \pi$.

General symmetric modes are the functions
$H_{ya}(t,x,z) = \cos(a 2 \pi x/D) e^{i k_z z - i k_t t}$
with $\frac{k_{za}}{k_t} = \sqrt{1 - (a/D)^2}$, $a = 0\ldots$ an non-negative integer.


## Field in the slit

In the slit, the field is also symmetric,
$H_{yb}(t,x,z) = \cos(b 2 \pi x/w) e^{i k_{zb} z - i k_t t}$
with $\frac{k_{zb}}{k_t} = \sqrt{1 - (b/w)^2}$,
$b = 0\ldots$ a non-negative integer.


## Square root determination

In both free-space and perfect-metal slit domains the $k_z$ component
are either real or purely imaginary. We want these values to be
positive in both cases. This is Maystre's square root determination `msqrt`.
To construct clean real or pure imaginary from real value,
`clean_msqrt` should be used.

<<>>=
msqrt(zin) = sqrt(1im)*(sqrt(-1im*zin))
clean_msqrt(x::AbstractFloat) = x < 0 ? Complex(0.0, sqrt(-x)) : Complex(sqrt(x), 0.0)
@

## Field equations

The $E_x$ field is obtained from $E_x = D_x$, and $\partial_t D_x = -\partial_z H_y$:
$E_x = \frac{k_z}{k_t} H_y$.


The $E_z$ electric field is obtained from $E_z = D_z$, and
$-i k_t D_z = \partial_x H_y$, or $E_z = \frac{i}{k_t} \partial_x H_y$.

Then in the slit $E_{zb} = \frac{-i w}{2 b \pi k_t}\sin(b 2 \pi x/w) e^{i k_{zb} z - i k_t t}$

# Interface equations

For an excitation from the top vacuum half space, the field at $z = 0$ is

$H_{ya}(x) = \sum_{a'} \cos(x \frac{2 \pi}{D} a') \left[(1_{aa} + S_{aa})U\right]_{a'}$,

and the electric field is

$E_{xa}(x) = \sum_{a'} \cos(x \frac{2 \pi}{D} a') \frac{k_{za'}}{k_t} \left[(-1_{aa} + S_{aa})U\right]_{a'}$.

At the entry of the slit, the field is

$H_{yb}(x) = \sum_{b'} \cos(x \frac{2 \pi}{w} b') \left[S_{ba} U\right]_{b'}$

and the electric field is

$E_{xb}(x) = \sum_{b'}  \cos(x \frac{2 \pi}{w} b') \frac{\kappa_{zb'}}{k_t} \left[-S_{ba} U\right]_{b'}$.

On the slit aperture, we have the equations

$H_{ya}(x) = H_{yb}(x)$
$E_{xa}(x) = E_{xb}(x)$

On the perfect conductor surface, we have

$E_{xa}(x) = 0$

# General formulation

Continuity of fields:

$\sigma_{\beta \alpha} H_{\alpha a} \left(1_{a a} + S_{a a}\right) = H_{\beta b} S_{b a}$
$\sigma_{\tilde{\beta} \alpha} E_{\alpha a} \left(-1_{a a} + S_{a a}\right) = 0_{\tilde{\beta} a}$
$\sigma_{\beta \alpha} E_{\alpha a} \left(-1_{a a} + S_{a a}\right) = -E_{\beta b} S_{b a}$

The $\sigma_{\beta \alpha}$ and $\sigma_{\alpha \beta}$ contains a 1 when $\alpha$ and $\beta$
correspond to the same $x$ point at the slit entry. One is the transposed of the other.

The $\sigma_{\tilde{\beta}} \alpha$ matrix contains a 1 when $\tilde{\beta}$ and
$\alpha$ correspond to the same $x$ point on the perfect conductor surface.

These two last equations can be combined as

$E_{\alpha a} \left(-1_{a a} + S_{a a}\right) = - \sigma_{\alpha \beta} E_{\beta b} S_{b a}$

Introducing

$h_{b a} = H_{b \beta}^{-1} \sigma_{\beta \alpha} H_{\alpha a}$
$e_{a b} = E_{a \alpha}^{-1} \sigma_{\alpha \beta} E_{\beta b}$

we have then the two equations

$S_{ba} = h_{ba} (1_{aa} + S_{aa})$
$-1_{aa} + S_{aa} = -e_{ab} S_{ba}$

which can be solved as

$S_{ba} = \left(1_{bb} + h_{ba} e_{ab}\right)^{-1}\left(2 h_{ba}\right)$
$S_{aa} = \left(1_{aa} + e_{ab} h_{ba}\right)^{-1}\left(1_{aa} - e_{ab} h_{ba}\right)$

This $S_{aa}$ matrix can be more conveniently computed from

$S_{aa} = 1 - e_{ab} S_{ba}$


For wave coming from the bottom:

$H_{\beta b} \left(1_{bb} + S_{bb}\right) = \sigma_{\beta \alpha} H_{\alpha a} S_{a b}$
$E_{\alpha a} S_{a b} = \sigma_{\alpha\beta} E_{\beta b} \left(1_{b b} - S_{b b}\right)$

Thus we obtain

$1_{b b} + S_{b b} = h_{b a} S_{a b}$
$S_{a b} = e_{a b} - e_{a b} S_{b b}$

which can be solved as

$S_{bb} = \left(1_{bb} + h_{ba} e_{ab}\right)^{-1} \left(-1_{bb} + e_{ba} e_{ab}\right)$
$S_{ab} = \left(1_{aa} + e_{ab} h_{ba}\right)^{-1} \left(2 e_{ab}\right)$

The $S_{ab}$ matrix can be more conveniently computed from

$S_{a b} = e_{a b} \left(1_{bb} - S_{b b}\right)$

All these formulas are similar to Fresnel formulas. The $e_{ab}$ and $h_{ba}$ can be rectangular.

## Computations

<<>>=
function compute_ks(params)

    kxaN = collect(0:(params[:Na]-1))*params[:λ]/params[:D]; # kxN = multiple of 1/D
    kzaN = clean_msqrt.(1.0 - kxaN.^2);
    kxbN = collect(0:(params[:Nb]-1))*params[:λ]/params[:w]; # kxN = multiple of 1/w
    kzbN = clean_msqrt.(1.0 - kxbN.^2);
    return Dict{Symbol,Any}(:kxaN => kxaN,
                            :kzaN => kzaN,
                            :kxbN => kxbN,
                            :kzbN => kzbN)
end
@

# Continuous formulation

## Magnetic field

$H_{\alpha a} = \cos(\alpha \frac{2 \pi}{D} a)$
$H_{a \alpha}^{-1} = \frac{2}{D} \cos(a \frac{2 \pi}{D} \alpha) \; \mathrm{if} \; a \ne 0,
H_{0 \alpha}^{-1} = \frac{1}{D}$

$H_{\beta b} = \cos(\beta \frac{2 \pi}{w} b)$
$H_{b \beta}^{-1} = \frac{2}{w} \cos(b \frac{2 \pi}{w} \beta) \; \mathrm{if} \; b \ne 0,
H_{0 \beta}^{-1} = \frac{1}{w}$

We can verify the formulation of inverse operators

$\int_{-D/2}^{D/2} H_{a \alpha}^{-1} H_{\alpha a'} d\alpha = \delta_{a a'}$
$\int_{-w/2}^{w/2} H_{b \beta}^{-1} H_{\beta b'} d\beta = \delta_{b b'}$

and compute the $h_{ba}$ matrix which is involved together with $e_{ab}$ in $S$-matrices computation (see before).

$h_{b a} = \int_{-w/2}^{w/2} \frac{2}{w} \cos(b \frac{2 \pi}{w} x) \cos(x \frac{2 \pi}{D} a) dx
= \mathrm{sinc}_{\pi}(b - a\frac{w}{D}) + \mathrm{sinc}_{\pi}(b + a\frac{w}{D})
\; \mathrm{if} \; b \ne 0$

$h_{0 a} = \int_{-w/2}^{w/2} \frac{1}{w} \cos(a \frac{2 \pi}{D} x) dx
= \mathrm{sinc}_{\pi}(a\frac{w}{D})$.

## Electric field

$E_{\alpha a} = \frac{k_{za}}{k_t} \cos(\alpha \frac{2 \pi}{D} a)$
$E_{a \alpha}^{-1} = \frac{2 k_t}{k_{za} D} \cos(a \frac{2 \pi}{D} \alpha) \; \mathrm{if} \; a \ne 0,
E_{0 \alpha}^{-1} = \frac{k_t}{k_{za} D}$

$E_{\beta b} = \frac{k_{zb}}{k_t} \cos(\beta \frac{2 \pi}{w} b)$
$E_{b \beta}^{-1} = \frac{2 k_t}{k_{zb} w} \cos(b \frac{2 \pi}{w} \beta) \; \mathrm{if} \; b \ne 0,
E_{0 \beta}^{-1} = \frac{k_t}{k_{zb} w}$

We can verify the formulation of inverse operators

$\int_{-D/2}^{D/2} E_{a \alpha}^{-1} E_{\alpha a'} d\alpha = \delta_{a a'}$
$\int_{-w/2}^{w/2} E_{b \beta}^{-1} E_{\beta b'} d\beta = \delta_{b b'}$

and compute the $e_{ab}$ matrix which is involved together with $h_{ba}$ in $S$-matrices computation (see before).

$e_{ab} = \int_{-w/2}^{w/2} \frac{2 k_{zb}}{k_{za} D} \cos(a \frac{2 \pi}{D} x) \cos(x \frac{2 \pi}{w} b) dx
= \frac{k_{zb} w}{k_{za} D}\left(\mathrm{sinc}_{\pi}(b - a\frac{w}{D}) + \mathrm{sinc}_{\pi}(b + a\frac{w}{D})\right)
\; \mathrm{if} \; a \ne 0$

$e_{0 b} = \int_{-w/2}^{w/2} \frac{1}{w} \cos(a \frac{2 \pi}{D} x) dx
= \frac{k_{zb} w}{k_{za} D} \mathrm{sinc}_{\pi}(b)$.


<<>>=
function compute_with_sincs(params)
    eyea = Diagonal(ones(params[:Na]));
    eyeb = Diagonal(ones(params[:Nb]));

    ks = compute_ks(params)
    kzaN = ks[:kzaN]
    kzbN = ks[:kzbN]
        
    hba = Array{Complex{Float64},2}(params[:Nb],params[:Na]);
    eab = Array{Complex{Float64},2}(params[:Na],params[:Nb]);

    sf = params[:w]/params[:D]
    for ia in 1:params[:Na]
        a = ia - 1
        hba[1, ia] = sinc(a*sf)
        for ib in 2:params[:Nb]
            b = ib - 1
            hba[ib, ia] = sinc(b - a*sf) + sinc(b + a*sf)
        end
    end
    
    for ib in 1:params[:Nb]
        b = ib - 1
        eab[1, ib] = sf*(kzbN[ib]/kzaN[1])*sinc(b)
        for ia in 2:params[:Na]
            a = ia - 1
            eab[ia, ib] = sf*(kzbN[ib]/kzaN[ia])*(sinc(b - a*sf) + sinc(b + a*sf))
        end
    end
    
    Sba = (eyeb + hba*eab)\(2*hba);
    Saa = eyea - eab*Sba;
    Sbb = (eyeb + hba*eab)\(-eyeb + hba*eab);
    Sab = eab*(eyeb - Sbb);
    
    # energy conservation a->b
    energya = abs2(Sba[1,1])*params[:w]/params[:D] + abs2(Saa[1,1])
    assert(maxdiff(energya, 1.0) < 1e-14)
    
    # energy conservation b->a
    energyb = abs2(Sab[1,1])*params[:D]/params[:w] + abs2(Sbb[1,1])
    assert(maxdiff(energyb, 1.0) < 1e-14)
    
    # reciprocity
    assert(maxdiff(abs2(Sba[1,1])*params[:w]/params[:D], abs2(Sab[1,1])*params[:D]/params[:w]) < 1e-14)

    return Dict{Symbol,Any}(:Saa => Saa,
                            :Sab => Sab,
                            :Sba => Sba,
                            :Sbb => Sbb)
end
@ 

<<>>=
params = Dict{Symbol,Any}(:λ  => 1.0,
                          :D  => 0.5,
                          :Na => 600,
                          :Nb => 100)
params[:w] = params[:D]/6;
maxdiff(a, b) = maximum(abs.(a - b))

rbest = 0.533522892163     # params[:Nb] = 1000; params[:Na] = 6*params[:Nb]; rbest = abs2(compute_with_sincs(params)[:Saa][1,1])
rbest = 0.533522891700889  # params[:Nb] = 2000; params[:Na] = 6*params[:Nb]; rbest = abs2(compute_with_sincs(params)[:Saa][1,1])
rbest = 0.5335228917007351 # params[:Nb] = 2001; params[:Na] = 6*params[:Nb]; rbest = abs2(compute_with_sincs(params)[:Saa][1,1])
rbest = 0.5335228916454655 # params[:Nb] = 2500; params[:Na] = 6*params[:Nb]; rbest = abs2(compute_with_sincs(params)[:Saa][1,1])
rbest = 0.5335228916153608 # params[:Nb] = 3000; params[:Na] = 6*params[:Nb]; rbest = abs2(compute_with_sincs(params)[:Saa][1,1])
rbest = 0.5335228916

assert(abs(abs2(compute_with_sincs(params)[:Saa][1,1]) - rbest) < 1e-7)

@ 
